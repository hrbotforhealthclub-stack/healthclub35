#!/usr/bin/env python3
import os
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
from dotenv import load_dotenv

load_dotenv()

import asyncio
import logging
import html
import re
from datetime import datetime, date
from math import radians, sin, cos, sqrt, atan2

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ChatAction, ChatType, ChatMemberStatus, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, CallbackQuery,
    KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardButton, InlineKeyboardMarkup,
    FSInputFile, ReplyKeyboardRemove,
    ChatMemberUpdated
)
from aiogram.utils.chat_action import ChatActionSender
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import func, text
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.engine.url import make_url
from sqlalchemy.exc import IntegrityError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ models.py
from models import (
    Employee, RoleGuide, BotText, OnboardingQuestion, EmployeeCustomData, OnboardingStep,
    Attendance, RegCode, Event, Idea, QuizQuestion, Topic, RoleOnboarding,
    ArchivedEmployee, ArchivedAttendance, ArchivedIdea,
    GroupChat, ConfigSetting, get_session
)

# ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ .env ‚Äî
# load_dotenv() # <-- –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///bot.db")
OFFICE_LAT = float(os.getenv("OFFICE_LAT", "43.231518"))
OFFICE_LON = float(os.getenv("OFFICE_LON", "76.882392"))
OFFICE_RADIUS_METERS = int(os.getenv("OFFICE_RADIUS_METERS", "300"))
UPLOAD_FOLDER_ONBOARDING = 'uploads/onboarding'
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
WEATHER_CITY = os.getenv("WEATHER_CITY", "Almaty")

# ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ‚Äî
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

ME_ID: int | None = None


async def get_me_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç ID —Å–∞–º–æ–≥–æ –±–æ—Ç–∞."""
    global ME_ID
    if ME_ID is None:
        ME_ID = (await bot.get_me()).id
    return ME_ID


def initialize_bot_texts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    texts_to_ensure = {
        "quiz_success_message": {
            "text": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑ ({correct}/{total})!",
            "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {name}, {correct}, {total}."
        },
        "group_join_success_message": {
            "text": "–û—Ç–ª–∏—á–Ω–æ, –º—ã –≤–∏–¥–∏–º, —á—Ç–æ –≤—ã —É–∂–µ –≤ –Ω–∞—à–µ–º –æ–±—â–µ–º —á–∞—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. üéâ",
            "description": "–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–≤–∏–∑ –∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ–±—â–µ–º —á–∞—Ç–µ."
        },
        "group_join_prompt_message": {
            "text": "–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —á–∞—Ç, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π.",
            "description": "–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–≤–∏–∑, –Ω–æ –µ—â–µ –Ω–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ."
        },
        "welcome_to_common_chat": {
            "text": "üëã –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–ª–µ–≥—É! {user_mention} ({user_name}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! üéâ",
            "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {user_mention}, {user_name}, {role}."
        }
    }
    with get_session() as db:
        for key, data in texts_to_ensure.items():
            if not db.get(BotText, key):
                db.add(BotText(id=key, text=data['text'], description=data['description']))
        db.commit()


# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_bot_texts()


# ‚Äî FSM States ‚Äî
class Reg(StatesGroup):
    waiting_code = State()
    waiting_for_status = State()


class Onboarding(StatesGroup):
    awaiting_answer = State()


class Training(StatesGroup):
    waiting_ack = State()


class Quiz(StatesGroup):
    waiting_answer = State()


class SubmitIdea(StatesGroup):
    waiting_for_idea = State()


class EditProfile(StatesGroup):
    choosing_field = State()
    waiting_for_new_value = State()


class FindEmployee(StatesGroup):
    waiting_for_name = State()


class TimeTracking(StatesGroup):
    waiting_location = State()


# ‚Äî –ö–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî
BACK_BTN = KeyboardButton(text="üîô –ù–∞–∑–∞–¥")

time_tracking_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –Ø –Ω–∞ –º–µ—Å—Ç–µ"), KeyboardButton(text="üëã –Ø —É—Ö–æ–∂—É")],
        [BACK_BTN]
    ],
    resize_keyboard=True
)

employee_main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚è∞ –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏")],
        [KeyboardButton(text="üéâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≤–µ–Ω—Ç—ã"), KeyboardButton(text="üí° –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π")],
        [KeyboardButton(text="üë• –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), KeyboardButton(text="üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–≤–µ–Ω—Ç"), KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–¥–µ–π")],
        [KeyboardButton(text="‚è∞ –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"), KeyboardButton(text="–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
        [KeyboardButton(text="üë• –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), KeyboardButton(text="üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
    ],
    resize_keyboard=True
)

employee_status_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–Ø –Ω–æ–≤–µ–Ω—å–∫–∏–π")],
        [KeyboardButton(text="–Ø –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")]
    ],
    resize_keyboard=True, one_time_keyboard=True
)

training_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–π—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥")]], resize_keyboard=True
)
quiz_start_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ì–æ—Ç–æ–≤!", callback_data="quiz_start")]])
ack_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è", callback_data="training_done")]])
PAGE_SIZE = 5


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_text(key: str, default: str = "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω") -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞ –∏–∑ –ë–î –ø–æ –∫–ª—é—á—É."""
    with get_session() as db:
        text_obj = db.get(BotText, key)
        return text_obj.text if text_obj else default


def get_config_value_sync(key: str, default: str = "") -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î."""
    with get_session() as db:
        setting = db.get(ConfigSetting, key)
        return setting.value if setting and setting.value is not None else default


def access_check(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–∏–Ω–≥."""

    async def wrapper(message_or_cb: Message | CallbackQuery, state: FSMContext, *args, **kwargs):
        user_id = message_or_cb.from_user.id
        with get_session() as db:
            emp = db.query(Employee).filter_by(telegram_id=user_id).first()

        if not emp or not emp.is_active:
            await func(message_or_cb, state, *args, **kwargs)
            return

        if emp.training_passed:
            await func(message_or_cb, state, *args, **kwargs)
        else:
            msg = message_or_cb.message if isinstance(message_or_cb, CallbackQuery) else message_or_cb
            await msg.answer(
                get_text("access_denied_training_required", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—Ä–µ–Ω–∏–Ω–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."),
                reply_markup=training_kb
            )
            if isinstance(message_or_cb, CallbackQuery):
                await message_or_cb.answer()

    return wrapper


def upsert_groupchat(db, chat, is_admin: bool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –≥—Ä—É–ø–ø–µ –≤ –ë–î."""
    ctype = getattr(chat.type, "value", str(chat.type))
    if ctype not in ("group", "supergroup", "channel"):
        return
    title = getattr(chat, "title", None) or getattr(chat, "full_name", None) or str(chat.id)
    username = getattr(chat, "username", None) or ""

    logger.info("[GroupChat] upsert start chat_id=%s title=%r type=%s is_admin=%s",
                chat.id, title, ctype, is_admin)
    try:
        gc = db.query(GroupChat).filter_by(chat_id=chat.id).first()
        if not gc:
            gc = GroupChat(chat_id=chat.id)
            db.add(gc)
        gc.title = title
        gc.username = username
        gc.type = ctype
        gc.is_admin = bool(is_admin)
        gc.updated_at = datetime.utcnow()
        db.commit()
    except Exception as e:
        logger.exception("[GroupChat] upsert FAILED chat_id=%s: %s", chat.id, e)
        db.rollback()


def haversine(lat1, lon1, lat2, lon2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ."""
    R = 6371000
    lat1_rad, lon1_rad, lat2_rad, lon2_rad = map(radians, [lat1, lon1, lat2, lon2])
    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad
    a = sin(dlat / 2) ** 2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon / 2) ** 2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c


from hashlib import blake2s


def role_to_token(role: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö."""
    return blake2s(role.encode("utf-8"), digest_size=5).hexdigest()


def token_to_role(token: str) -> str | None:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ —Ç–æ–∫–µ–Ω—É."""
    with get_session() as db:
        rows = db.query(Employee.role).filter(Employee.is_active == True, Employee.role != None).distinct().all()
    for (role,) in rows:
        if role and role_to_token(role) == token:
            return role
    return None


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Ç–∞—Ö ---

@dp.message(F.new_chat_members)
async def on_any_new_members(msg: Message):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ –Ω–æ–≤—ã–π —á–∞—Ç."""
    me_id = await get_me_id()
    if any(u.id == me_id for u in msg.new_chat_members):
        try:
            m = await bot.get_chat_member(msg.chat.id, me_id)
            st = getattr(getattr(m, "status", None), "value", getattr(m, "status", None))
            is_admin = st in ("administrator", "creator")
        except Exception as e:
            logger.warning("[new_chat_members] get_chat_member failed: %s", e)
            is_admin = False
        with get_session() as db:
            upsert_groupchat(db, msg.chat, is_admin)


@dp.my_chat_member()
async def on_bot_membership_change(event: ChatMemberUpdated):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º)."""
    ctype_val = getattr(event.chat.type, "value", str(event.chat.type))
    if ctype_val not in ("group", "supergroup", "channel"):
        return
    new_status = getattr(event.new_chat_member.status, "value", event.new_chat_member.status)
    is_admin = new_status in ("creator", "administrator")
    with get_session() as db:
        upsert_groupchat(db, event.chat, is_admin)


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ ---

@dp.message(Command("start"))
async def cmd_start(msg: Message, state: FSMContext):
    await state.clear()
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()

    if emp and emp.registered:
        if not emp.is_active:
            await msg.answer(get_text("account_deactivated", "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."))
            return

        kb = admin_kb if emp.role == "Admin" else employee_main_kb
        if emp.training_passed:
            await msg.answer(get_text("welcome_back", "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!").format(name=emp.name), reply_markup=kb)
        elif emp.onboarding_completed:
            await msg.answer(
                get_text("training_not_passed_prompt", "–ü—Ä–∏–≤–µ—Ç! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –ø—Ä–æ–π–¥–∏—Ç–µ —Ç—Ä–µ–Ω–∏–Ω–≥."),
                reply_markup=training_kb)
        else:
            await msg.answer(
                get_text("onboarding_not_finished", "–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º!"))
            await run_onboarding(msg.from_user.id, state)
    else:
        await msg.answer(get_text("enter_reg_code", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à 8-–∑–Ω–∞—á–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥:"),
                         reply_markup=ReplyKeyboardRemove())
        await state.set_state(Reg.waiting_code)


@dp.message(Command("here", "register_chat", "chatid", "id"))
async def register_chat_here(msg: Message):
    ctype = getattr(msg.chat.type, "value", str(msg.chat.type))
    if ctype not in ("group", "supergroup", "channel"):
        return await msg.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö.")

    me_id = await get_me_id()
    try:
        m = await bot.get_chat_member(msg.chat.id, me_id)
        st = getattr(getattr(m, "status", None), "value", getattr(m, "status", None))
        is_admin = st in ("administrator", "creator")
    except Exception:
        is_admin = False

    with get_session() as db:
        upsert_groupchat(db, msg.chat, is_admin)

    await msg.answer(
        f"–û–∫, –∑–∞–ø–∏—Å–∞–ª:\n<b>{msg.chat.title or msg.chat.id}</b>\n"
        f"chat_id: <code>{msg.chat.id}</code>\n"
        f"–ê–¥–º–∏–Ω: {'–î–∞' if is_admin else '–ù–µ—Ç'}",
        parse_mode="HTML"
    )


@dp.message(Reg.waiting_code)
async def process_code(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await msg.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    code = msg.text.strip()
    with get_session() as db:
        rc = db.query(RegCode).filter_by(code=code, used=False).first()
        if not rc:
            await msg.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        emp = db.query(Employee).filter_by(email=rc.email).first()
        if not emp or not emp.is_active:
            await msg.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            await state.clear()
            return

        emp.telegram_id = msg.from_user.id
        emp.registered = True
        rc.used = True
        db.commit()

    await msg.answer(
        "–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! üéâ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:",
        reply_markup=employee_status_kb
    )
    await state.set_state(Reg.waiting_for_status)


@dp.message(Reg.waiting_for_status, F.text.in_({"–Ø –Ω–æ–≤–µ–Ω—å–∫–∏–π", "–Ø –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"}))
async def process_employee_status(msg: Message, state: FSMContext):
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
        if msg.text == "–Ø –Ω–æ–≤–µ–Ω—å–∫–∏–π":
            await msg.answer(get_text("lets_get_acquainted", "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!"),
                             reply_markup=ReplyKeyboardRemove())
            await run_onboarding(msg.from_user.id, state)
            return

        emp.onboarding_completed = True
        emp.training_passed = True
        db.commit()

        kb = admin_kb if emp.role == "Admin" else employee_main_kb
        await msg.answer(
            get_text("welcome_existing_employee",
                     "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–∞—Å.").format(name=emp.name),
            reply_markup=kb
        )
    await state.clear()


async def run_onboarding(user_id: int, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö)."""
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=user_id).first()
        answered_keys_rows = db.query(EmployeeCustomData.data_key).filter_by(employee_id=emp.id).all()
        answered_keys = [key for (key,) in answered_keys_rows]

        next_question = db.query(OnboardingQuestion).filter(
            OnboardingQuestion.role == emp.role,
            ~OnboardingQuestion.data_key.in_(answered_keys)
        ).order_by(OnboardingQuestion.order_index).first()

    if next_question:
        await bot.send_message(user_id, next_question.question_text)
        await state.set_state(Onboarding.awaiting_answer)
        await state.update_data(current_question_id=next_question.id)
    else:
        await run_company_introduction(user_id, state)


@dp.message(Onboarding.awaiting_answer)
async def process_onboarding_answer(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    data = await state.get_data()
    question_id = data.get("current_question_id")
    answer_text = msg.text

    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
        question = db.get(OnboardingQuestion, question_id)
        if not question:
            await run_onboarding(msg.from_user.id, state)
            return

        parsed_bday = None
        if question.data_key == 'birthday':
            try:
                parsed_bday = datetime.strptime(answer_text, "%d.%m.%Y").date()
            except ValueError:
                await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
                return

        values = dict(employee_id=emp.id, data_key=question.data_key, data_value=answer_text)
        stmt = insert(EmployeeCustomData.__table__).values(values).on_conflict_do_update(
            index_elements=['employee_id', 'data_key'],
            set_={'data_value': insert(EmployeeCustomData.__table__).excluded.data_value}
        )
        db.execute(stmt)

        if question.data_key == 'name':
            emp.name = answer_text
        elif question.data_key == 'birthday':
            emp.birthday = parsed_bday
        elif question.data_key == 'contact_info':
            emp.contact_info = answer_text
        db.commit()

    await run_onboarding(msg.from_user.id, state)


async def run_company_introduction(user_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–≥–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π."""
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=user_id).first()
        if not emp.onboarding_completed:
            emp.onboarding_completed = True
            db.commit()

        steps = db.query(OnboardingStep).filter_by(role=emp.role).order_by(OnboardingStep.order_index).all()

    await bot.send_message(user_id, get_text("company_introduction_start", "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –æ –∫–æ–º–ø–∞–Ω–∏–∏."))
    for step in steps:
        if step.message_text:
            await bot.send_message(user_id, step.message_text)

        if step.file_path and os.path.exists(step.file_path):
            try:
                file_to_send = FSInputFile(step.file_path)
                if step.file_type == 'video_note':
                    await bot.send_video_note(user_id, file_to_send)
                elif step.file_type == 'video':
                    await bot.send_video(user_id, file_to_send)
                elif step.file_type == 'photo':
                    await bot.send_photo(user_id, file_to_send)
                elif step.file_type == 'document':
                    await bot.send_document(user_id, file_to_send)
            except Exception as e:
                logger.error(f"Failed to send file {step.file_path}: {e}")

        await asyncio.sleep(1.5)

    await state.clear()
    await bot.send_message(
        user_id,
        get_text("training_prompt_after_onboarding", "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥."),
        reply_markup=training_kb
    )


# --- –¢—Ä–µ–Ω–∏–Ω–≥ –∏ –∫–≤–∏–∑ ---

@dp.message(F.text == "üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–π—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥")
async def start_training(msg: Message, state: FSMContext):
    await state.clear()
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
        if not emp or not emp.is_active: return
        onboarding = db.query(RoleOnboarding).filter_by(role=emp.role).first()

    if onboarding and onboarding.text:
        await msg.answer(onboarding.text, reply_markup=ReplyKeyboardRemove())
        if onboarding.file_path and os.path.exists(onboarding.file_path):
            try:
                file_to_send = FSInputFile(onboarding.file_path)
                if onboarding.file_type == 'video_note':
                    await bot.send_video_note(msg.chat.id, file_to_send)
            except Exception as e:
                logger.error(f"Failed to send training file {onboarding.file_path}: {e}")
    else:
        await msg.answer("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–∏–Ω–≥–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è¬ª, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑.", reply_markup=ack_kb)
    await state.set_state(Training.waiting_ack)


@dp.callback_query(F.data == "training_done")
async def training_done(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    await cb.message.answer("‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞–Ω–∏—è –≤ –∫–≤–∏–∑–µ.", reply_markup=quiz_start_kb)
    await state.clear()
    await cb.answer()


@dp.callback_query(F.data == "quiz_start")
async def on_quiz_start(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=cb.from_user.id).first()
        qs = db.query(QuizQuestion).filter_by(role=emp.role).order_by(QuizQuestion.order_index).all()
        if not qs:
            emp.training_passed = True
            db.commit()
            kb = admin_kb if emp.role == "Admin" else employee_main_kb
            await cb.message.answer("üéâ –î–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –∫–≤–∏–∑–∞ –Ω–µ—Ç ‚Äî —Ç—Ä–µ–Ω–∏–Ω–≥ –ø—Ä–æ–π–¥–µ–Ω.", reply_markup=kb)
            await cb.answer()
            return
    await cb.message.answer("üìù –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑:")
    await send_quiz_question(cb.message, qs[0], 0)
    await state.update_data(quiz_questions=qs, quiz_index=0, correct=0)
    await state.set_state(Quiz.waiting_answer)
    await cb.answer()


async def send_quiz_question(chat, question, idx):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞."""
    num = idx + 1
    if question.question_type == "choice":
        opts = question.options.split(";")
        buttons = [[InlineKeyboardButton(text=opt, callback_data=f"quiz_ans:{i}")] for i, opt in enumerate(opts)]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await chat.answer(f"{num}. {question.question}", reply_markup=kb)
    else:
        await chat.answer(f"{num}. {question.question}")


async def finish_quiz(user_id: int, chat_id: int, state: FSMContext, correct: int, total: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=user_id).first()
        is_passed = correct >= total * 0.7
        emp.training_passed = is_passed
        db.commit()

    kb = admin_kb if emp.role == "Admin" else employee_main_kb
    if not is_passed:
        await bot.send_message(chat_id, f"üòî –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑ ({correct}/{total}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                               reply_markup=training_kb)
        await state.clear()
        return

    quiz_success_text = get_text("quiz_success_message",
                                 "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑ ({correct}/{total})!").format(
        name=emp.name, correct=correct, total=total
    )
    await bot.send_message(chat_id, quiz_success_text)

    final_message = get_text("group_join_prompt_message",
                             "–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —á–∞—Ç, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π.")
    await bot.send_message(chat_id, final_message, reply_markup=kb)
    await state.clear()


@dp.message(Quiz.waiting_answer, F.text)
async def process_text_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    qs, idx, correct = data["quiz_questions"], data["quiz_index"], data["correct"]
    q = qs[idx]
    if q.question_type == "choice": return
    if msg.text.strip().lower() == q.answer.strip().lower():
        correct += 1
    idx += 1
    if idx < len(qs):
        await state.update_data(quiz_index=idx, correct=correct)
        await send_quiz_question(msg, qs[idx], idx)
    else:
        await finish_quiz(user_id=msg.from_user.id, chat_id=msg.chat.id, state=state, correct=correct, total=len(qs))


@dp.callback_query(Quiz.waiting_answer, F.data.startswith("quiz_ans:"))
async def process_choice_answer(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    data = await state.get_data()
    qs, idx, correct = data["quiz_questions"], data["quiz_index"], data["correct"]
    q = qs[idx]
    sel = int(cb.data.split(":", 1)[1])
    opts = q.options.split(";")
    user_ans = opts[sel]
    if user_ans.strip().lower() == q.answer.strip().lower():
        correct += 1
    idx += 1
    if idx < len(qs):
        await state.update_data(quiz_index=idx, correct=correct)
        await send_quiz_question(cb.message, qs[idx], idx)
    else:
        await finish_quiz(user_id=cb.from_user.id, chat_id=cb.message.chat.id, state=state, correct=correct,
                          total=len(qs))
    await cb.answer()


# --- –ü—Ä–æ—Ñ–∏–ª—å ---

def get_profile_kb() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="profile_edit")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="profile_back")]
    ])


@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(msg: Message, state: FSMContext):
    await state.clear()
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
    if not emp:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    profile_data = [
        f"<b>–ò–º—è:</b> {html.escape(emp.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–†–æ–ª—å:</b> {html.escape(emp.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        f"<b>Email:</b> {html.escape(emp.email)}",
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {html.escape(emp.contact_info or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    ]
    caption = "\n".join(profile_data)
    if emp.photo_file_id:
        try:
            await msg.answer_photo(
                photo=emp.photo_file_id,
                caption=caption,
                reply_markup=get_profile_kb()
            )
        except Exception as e:
            logger.error(f"Failed to send photo by file_id for user {emp.id}: {e}")
            await msg.answer(caption, reply_markup=get_profile_kb())
    else:
        await msg.answer(f"üì∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞.\n\n{caption}", reply_markup=get_profile_kb())


@dp.callback_query(F.data == "profile_back")
async def process_profile_back(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    await state.clear()
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=cb.from_user.id).first()
    kb = admin_kb if emp and emp.role == "Admin" else employee_main_kb
    await cb.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb)
    await cb.answer()


def get_edit_profile_kb() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    buttons = [
        [InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="edit_field:photo")],
        [InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_field:name")],
        [InlineKeyboardButton(text="‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É", callback_data="edit_field:email")],
        [InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="edit_field:contact_info")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data == "profile_edit")
async def start_profile_edit(cb: CallbackQuery, state: FSMContext):
    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ."
    new_kb = get_edit_profile_kb()

    if cb.message.photo:
        await cb.message.edit_caption(caption=new_text, reply_markup=new_kb)
    else:
        await cb.message.edit_text(new_text, reply_markup=new_kb)

    await state.set_state(EditProfile.choosing_field)
    await cb.answer()


@dp.callback_query(F.data == "edit_cancel")
async def cancel_profile_edit(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.delete()
    await show_profile(cb.message, state)
    await cb.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.callback_query(F.data.startswith("edit_field:"))
async def choose_field_to_edit(cb: CallbackQuery, state: FSMContext):
    field_to_edit = cb.data.split(":")[1]
    prompts = {
        "photo": "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞.",
        "name": "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è.",
        "email": "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email (–ø—Ä–∏–º–µ—Ä: name@domain.com).",
        "contact_info": "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)."
    }
    await state.update_data(field_to_edit=field_to_edit)
    await state.set_state(EditProfile.waiting_for_new_value)
    await cb.message.answer(prompts.get(field_to_edit, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
    await cb.answer()


@dp.message(EditProfile.waiting_for_new_value, F.photo)
async def handle_new_photo(msg: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("field_to_edit") != "photo":
        await msg.answer("–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä'.")
        return

    photo_file_id = msg.photo[-1].file_id
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
        emp.photo_file_id = photo_file_id
        db.commit()

    await msg.answer("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()
    await show_profile(msg, state)


@dp.message(EditProfile.waiting_for_new_value, F.text)
async def handle_new_text_value(msg: Message, state: FSMContext):
    data = await state.get_data()
    field_to_edit = data.get("field_to_edit")

    if not field_to_edit or field_to_edit == "photo":
        await msg.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    new_value = msg.text.strip()
    if field_to_edit == "email":
        if not re.fullmatch(r"[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,}", new_value):
            await msg.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü—Ä–∏–º–µ—Ä: name@domain.com\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.")
            return
        new_value = new_value.lower()
        with get_session() as db:
            emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
            conflict = db.query(Employee).filter(
                Employee.email == new_value,
                Employee.id != emp.id
            ).first()
            if conflict:
                await msg.answer("‚ùå –¢–∞–∫–æ–π email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.")
                return
            emp.email = new_value
            db.commit()
        await msg.answer("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        await state.clear()
        await show_profile(msg, state)
        return

    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
        setattr(emp, field_to_edit, new_value)
        db.commit()

    await msg.answer(f"‚úÖ –ü–æ–ª–µ '{field_to_edit}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    await show_profile(msg, state)


# --- –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ ---

@dp.message(F.text == "‚è∞ –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏")
@access_check
async def show_time_tracking_menu(message: Message, state: FSMContext, **kwargs):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=time_tracking_kb)


@dp.message(F.text == "‚úÖ –Ø –Ω–∞ –º–µ—Å—Ç–µ")
@access_check
async def ask_arrival(msg: Message, state: FSMContext, **kwargs):
    await state.update_data(tracking="arrival")
    await state.set_state(TimeTracking.waiting_location)
    await msg.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                [BACK_BTN]
            ],
            resize_keyboard=True
        )
    )


@dp.message(F.text == "üëã –Ø —É—Ö–æ–∂—É")
@access_check
async def ask_departure(msg: Message, state: FSMContext, **kwargs):
    await state.update_data(tracking="departure")
    await state.set_state(TimeTracking.waiting_location)
    await msg.answer(
        "–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                [BACK_BTN]
            ],
            resize_keyboard=True
        )
    )


@dp.message(TimeTracking.waiting_location, F.location)
@access_check
async def process_time_tracking(msg: Message, state: FSMContext, **kwargs):
    data = await state.get_data()
    kind = data.get("tracking")
    await state.clear()

    distance = haversine(
        msg.location.latitude, msg.location.longitude,
        OFFICE_LAT, OFFICE_LON
    )
    if distance > OFFICE_RADIUS_METERS:
        return await msg.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –æ—Ñ–∏—Å–∞ ({int(distance)} –º).")

    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
        today = date.today()
        now = datetime.now().time()
        rec = db.query(Attendance).filter_by(employee_id=emp.id, date=today).first()
        if not rec:
            rec = Attendance(employee_id=emp.id, date=today)
            db.add(rec)
            try:
                db.flush()
            except IntegrityError:
                db.rollback()
                rec = db.query(Attendance).filter_by(employee_id=emp.id, date=today).first()

        if kind == "arrival":
            if rec.arrival_time:
                resp = "ü§î –£–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è."
            else:
                rec.arrival_time = now
                db.commit()
                resp = f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%H:%M:%S')}."
        else:
            if not rec.arrival_time:
                resp = "ü§î –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Ö–æ–¥."
            elif rec.departure_time:
                resp = "ü§î –£–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ —É—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è."
            else:
                rec.departure_time = now
                db.commit()
                resp = f"üëã –£—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%H:%M:%S')}."

        kb = admin_kb if emp.role == "Admin" else employee_main_kb
        await msg.answer(resp, reply_markup=kb)


# --- –ü—Ä–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---

@dp.message(F.text == "üéâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≤–µ–Ω—Ç—ã")
@access_check
async def view_events(msg: Message, state: FSMContext, **kwargs):
    with get_session() as db:
        upcoming_events = db.query(Event).filter(Event.event_date >= datetime.now()).order_by(Event.event_date).all()
    if not upcoming_events:
        await msg.answer("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤.")
        return
    response = "<b>üéâ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≤–µ–Ω—Ç—ã:</b>\n\n"
    for event in upcoming_events:
        event_date_str = event.event_date.strftime("%d.%m.%Y –≤ %H:%M")
        response += (f"<b>{html.escape(event.title)}</b>\n"
                     f"<i>{html.escape(event.description)}</i>\n"
                     f"<b>–ö–æ–≥–¥–∞:</b> {event_date_str}\n\n")
    await msg.answer(response)


@dp.message(F.text == "üí° –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π")
@access_check
async def share_idea_start(msg: Message, state: FSMContext, **kwargs):
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–≥–æ.",
                     reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    await state.set_state(SubmitIdea.waiting_for_idea)


@dp.message(SubmitIdea.waiting_for_idea)
async def process_idea(msg: Message, state: FSMContext, **kwargs):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        with get_session() as db:
            emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
        kb = admin_kb if emp and emp.role == "Admin" else employee_main_kb
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        return

    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id, is_active=True).first()
        if not emp: return

        new_idea = Idea(employee_id=emp.id, text=msg.text)
        db.add(new_idea)
        db.commit()

    kb = admin_kb if emp and emp.role == "Admin" else employee_main_kb
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=kb)
    await state.clear()


# --- –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ---

def get_employees_menu_kb() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóÇ –ü–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="browse_by_role")],
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="search_by_name")],
    ])


@dp.message(F.text == "üë• –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
@access_check
async def show_employees_main_menu(msg: Message, state: FSMContext, **kwargs):
    await state.clear()
    await msg.answer(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
        reply_markup=get_employees_menu_kb()
    )


@dp.callback_query(F.data == "search_by_name")
async def start_employee_search(cb: CallbackQuery, state: FSMContext):
    await state.set_state(FindEmployee.waiting_for_name)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_employees_menu")]
        ])
    )
    await cb.answer()


@dp.message(FindEmployee.waiting_for_name, F.text)
async def process_employee_search(msg: Message, state: FSMContext):
    await state.clear()
    query = msg.text.strip()
    with get_session() as db:
        found_employees = db.query(Employee).filter(
            Employee.name.ilike(f'%{query}%'),
            Employee.is_active == True
        ).all()

    if not found_employees:
        await msg.answer(
            f"üòî –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –∏–º–µ–Ω–µ–º '{html.escape(query)}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_employees_menu_kb()
        )
        return

    buttons = [
        [InlineKeyboardButton(text=emp.name, callback_data=f"view_employee:{emp.id}")]
        for emp in found_employees
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_employees_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await msg.answer(f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{html.escape(query)}':</b>", reply_markup=kb)


@dp.callback_query(F.data == "browse_by_role")
async def browse_by_role(cb: CallbackQuery):
    await send_roles_page(chat_id=cb.message.chat.id, message_id=cb.message.message_id)
    await cb.answer()


async def send_employee_buttons_by_role(chat_id: int, message_id: int, role: str, page: int = 0):
    with get_session() as db:
        offset = page * PAGE_SIZE
        employees_on_page = db.query(Employee).filter(
            Employee.role == role, Employee.is_active == True
        ).offset(offset).limit(PAGE_SIZE).all()
        total_employees = db.query(func.count(Employee.id)).filter(
            Employee.role == role, Employee.is_active == True
        ).scalar()

    text = f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ '{html.escape(role)}' (–°—Ç—Ä. {page + 1}):</b>"
    buttons = [
        [InlineKeyboardButton(text=emp.name, callback_data=f"view_employee:{emp.id}")]
        for emp in employees_on_page
    ]
    pagination_row = []
    tok = role_to_token(role)
    if page > 0:
        pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"role_page:{tok}:{page - 1}"))
    if (page + 1) * PAGE_SIZE < total_employees:
        pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"role_page:{tok}:{page + 1}"))
    if pagination_row:
        buttons.append(pagination_row)
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª–∞–º", callback_data="back_to_roles")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id, reply_markup=kb)


@dp.callback_query(F.data.startswith("role_select:"))
async def handle_role_select(cb: CallbackQuery):
    _, tok, page_str = cb.data.split(":")
    role = token_to_role(tok)
    if not role:
        await cb.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await send_employee_buttons_by_role(cb.message.chat.id, cb.message.message_id, role, int(page_str))
    await cb.answer()


@dp.callback_query(F.data.startswith("role_page:"))
async def handle_employee_page_switch(cb: CallbackQuery):
    _, tok, page_str = cb.data.split(":")
    role = token_to_role(tok)
    if not role:
        await cb.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    await send_employee_buttons_by_role(cb.message.chat.id, cb.message.message_id, role, int(page_str))
    await cb.answer()


@dp.callback_query(F.data.startswith("view_employee:"))
async def show_employee_profile(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ñ–æ—Ç–æ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏."""
    await state.clear()
    employee_id = int(cb.data.split(":")[1])

    with get_session() as db:
        emp = db.get(Employee, employee_id)
    if not emp:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", show_alert=True)
        return

    profile_text = [
        f"<b>–ò–º—è:</b> {html.escape(emp.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–†–æ–ª—å:</b> {html.escape(emp.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        f"<b>Email:</b> {html.escape(emp.email)}",
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {html.escape(emp.contact_info or '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    ]
    caption = "\n".join(profile_text)
    buttons = []
    if emp.telegram_id:
        buttons.append([InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram", url=f"tg://user?id={emp.telegram_id}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_employees_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await cb.message.delete()
    if emp.photo_file_id:
        await cb.message.answer_photo(photo=emp.photo_file_id, caption=caption, reply_markup=kb)
    else:
        await cb.message.answer(f"üì∏ –ê–≤–∞—Ç–∞—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n{caption}", reply_markup=kb)
    await cb.answer()


@dp.callback_query(F.data == "back_to_employees_menu")
async def back_to_employees_menu(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ '–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'."""
    await state.clear()
    await cb.message.delete()
    await cb.message.answer(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
        reply_markup=get_employees_menu_kb()
    )
    await cb.answer()


@dp.callback_query(F.data == "back_to_roles")
async def handle_back_to_roles(cb: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç–¥–µ–ª–æ–≤."""
    await send_roles_page(chat_id=cb.message.chat.id, message_id=cb.message.message_id)
    await cb.answer()


async def send_roles_page(chat_id: int, message_id: int | None = None):
    with get_session() as db:
        roles = (
            db.query(Employee.role)
            .filter(Employee.is_active == True, Employee.role != None)
            .distinct()
            .all()
        )

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:"
    buttons = []
    for (role,) in roles:
        tok = role_to_token(role)
        buttons.append([InlineKeyboardButton(text=role, callback_data=f"role_select:{tok}:0")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_employees_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    if message_id:
        await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id, reply_markup=kb)
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)


# --- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ---

def get_kb_menu_kb() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="kb_show_topics")],
        [InlineKeyboardButton(text="üìö –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ –≥–∞–π–¥—ã", callback_data="kb_show_guides")]
    ])


@dp.message(F.text == "üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
@access_check
async def show_kb_main_menu(message: Message, state: FSMContext, **kwargs):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π:", reply_markup=get_kb_menu_kb())


@dp.callback_query(F.data == "kb_show_topics")
async def show_kb_topics_handler(cb: CallbackQuery):
    await send_kb_page(chat_id=cb.message.chat.id, message_id=cb.message.message_id)
    await cb.answer()


@dp.callback_query(F.data == "kb_show_guides")
async def show_role_guides(cb: CallbackQuery):
    await cb.answer()
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=cb.from_user.id).first()
        if not emp:
            await cb.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return
        guides = db.query(RoleGuide).filter_by(role=emp.role).order_by(RoleGuide.order_index).all()

    if not guides:
        await cb.message.edit_text(f"–î–ª—è –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{emp.role}' –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤.",
                                   reply_markup=get_kb_menu_kb())
        return

    await cb.message.edit_text(f"<b>–†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ ¬´{emp.role}¬ª:</b>")
    for guide in guides:
        text = f"<b>{html.escape(guide.title)}</b>"
        if guide.content:
            text += f"\n\n{html.escape(guide.content)}"
        await cb.message.answer(text)
        if guide.file_path and os.path.exists(guide.file_path):
            try:
                await cb.message.answer_document(FSInputFile(guide.file_path))
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ {guide.file_path}: {e}")
        await asyncio.sleep(0.5)


async def send_kb_page(chat_id: int, message_id: int | None = None, page: int = 0):
    with get_session() as db:
        offset = page * PAGE_SIZE
        topics_on_page = db.query(Topic).order_by(Topic.title).offset(offset).limit(PAGE_SIZE).all()
        total_topics = db.query(func.count(Topic.id)).scalar()

    if not total_topics:
        text, kb = "üòî –í –ë–∞–∑–µ –ó–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏.", None
    else:
        text = f"<b>üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):"
        buttons = [
            [InlineKeyboardButton(text=topic.title, callback_data=f"view_topic:{topic.id}:{page}")]
            for topic in topics_on_page
        ]
        pagination_row = []
        if page > 0:
            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"kb_page:{page - 1}"))
        if (page + 1) * PAGE_SIZE < total_topics:
            pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"kb_page:{page + 1}"))
        if pagination_row:
            buttons.append(pagination_row)
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞", callback_data="back_to_kb_main_menu")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    if message_id:
        await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id, reply_markup=kb)
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)


@dp.callback_query(F.data.startswith("kb_page:"))
async def switch_kb_page(cb: CallbackQuery):
    page = int(cb.data.split(":")[1])
    await send_kb_page(chat_id=cb.message.chat.id, message_id=cb.message.message_id, page=page)
    await cb.answer()


@dp.callback_query(F.data.startswith("view_topic:"))
async def view_kb_topic(cb: CallbackQuery):
    _, topic_id, page_to_return = cb.data.split(":")
    with get_session() as db:
        topic = db.get(Topic, int(topic_id))

    if not topic:
        await cb.answer("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    text_content = f"<b>{html.escape(topic.title)}</b>\n\n{html.escape(topic.content)}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_to_kb_list:{page_to_return}")]])
    await cb.message.delete()
    if topic.image_path and os.path.exists(topic.image_path):
        try:
            await bot.send_photo(chat_id=cb.message.chat.id, photo=FSInputFile(topic.image_path), caption=text_content,
                                 reply_markup=kb)
        except Exception as e:
            logger.error(f"Failed to send topic photo {topic.image_path}: {e}")
            await bot.send_message(cb.message.chat.id, text_content, reply_markup=kb, disable_web_page_preview=True)
    else:
        await bot.send_message(cb.message.chat.id, text_content, reply_markup=kb, disable_web_page_preview=True)
    await cb.answer()


@dp.callback_query(F.data.startswith("back_to_kb_list:"))
async def back_to_kb_list(cb: CallbackQuery):
    page = int(cb.data.split(":")[1])
    await cb.message.delete()
    await send_kb_page(chat_id=cb.message.chat.id, page=page)
    await cb.answer()


@dp.callback_query(F.data == "back_to_kb_main_menu")
async def back_to_kb_main_menu_handler(cb: CallbackQuery):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π:", reply_markup=get_kb_menu_kb())
    await cb.answer()


# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç ---

scheduler = AsyncIOScheduler(timezone="Asia/Almaty")


@scheduler.scheduled_job("cron", hour=7, minute=30)
async def send_daily_weather():
    if not WEATHER_API_KEY:
        return logger.warning("WEATHER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={WEATHER_CITY}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {resp.status}")
                data = await resp.json()
                weather_text = (
                    f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ–≥–æ–¥–∞ –≤ –≥. {WEATHER_CITY} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{round(data['main']['temp'])}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(data['main']['feels_like'])}¬∞C)\n"
                    f"üìù –ù–∞ –Ω–µ–±–µ: {data['weather'][0]['description'].capitalize()}\n"
                    f"üí® –í–µ—Ç–µ—Ä: {round(data['wind']['speed'])} –º/—Å\n\n"
                    f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
                )
    except Exception as e:
        return logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")

    with get_session() as db:
        user_ids = [row[0] for row in db.query(Employee.telegram_id).filter(Employee.is_active == True,
                                                                            Employee.telegram_id != None).all()]
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, weather_text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(0.1)


@scheduler.scheduled_job("cron", hour=00, minute=00)
async def birthday_jobs():
    active_chats_str = get_config_value_sync("ACTIVE_CHAT_IDS", "")
    if not active_chats_str:
        return logger.warning("ACTIVE_CHAT_IDS –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    chat_ids = [int(cid.strip()) for cid in active_chats_str.split(',') if
                cid.strip() and cid.strip().lstrip('-').isdigit()]
    if not chat_ids: return

    today_md = datetime.now().strftime("%m-%d")
    with get_session() as db:
        engine_url = make_url(os.getenv("DATABASE_URL", "sqlite:///bot.db"))
        if engine_url.get_backend_name().startswith("postgres"):
            emps = db.query(Employee).filter(text("to_char(birthday, 'MM-DD') = :md and is_active = true")).params(
                md=today_md).all()
        else:
            emps = db.query(Employee).filter(func.strftime("%m-%d", Employee.birthday) == today_md,
                                             Employee.is_active == True).all()

    if not emps: return
    greeting_template = get_text("birthday_greeting", "üéÇ –°–µ–≥–æ–¥–Ω—è —É {name} ({role}) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ")
    for emp in emps:
        greeting_text = greeting_template.format(name=html.escape(emp.name or ""), role=html.escape(emp.role or ""))
        for chat_id in chat_ids:
            try:
                await bot.send_message(chat_id=chat_id, text=greeting_text)
            except Exception as e:
                logger.error(f"Failed to send birthday greeting for {emp.name} to chat {chat_id}: {e}")
            await asyncio.sleep(0.2)


@dp.chat_member()
async def on_user_join_tracked_chat(event: ChatMemberUpdated):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª—é–±–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —á–∞—Ç –∏–∑ –ë–î."""
    with get_session() as db:
        if not db.query(GroupChat).filter_by(chat_id=event.chat.id).first():
            return

    was = event.old_chat_member.status
    now = event.new_chat_member.status
    joined_from = {ChatMemberStatus.LEFT, ChatMemberStatus.KICKED, ChatMemberStatus.RESTRICTED}
    joined_to = {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
    if not (was in joined_from and now in joined_to and not event.new_chat_member.user.is_bot):
        return

    user = event.new_chat_member.user
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=user.id).first()
        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ emp.joined_main_chat
        if not emp or not emp.training_passed:
            return

        # –°—Ç—Ä–æ–∫–∞ emp.joined_main_chat = True —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–∞

    user_mention = f"@{user.username}" if user.username else user.mention_html()
    welcome_text = get_text("welcome_to_common_chat").format(
        user_mention=user_mention,
        user_name=html.escape(user.full_name),
        role=html.escape(emp.role or "‚Äî")
    )
    try:
        await bot.send_message(chat_id=event.chat.id, text=welcome_text)
        logger.info(f"Sent welcome message for {user.full_name} to chat {event.chat.id}")
    except Exception as e:
        logger.error(f"Failed to send welcome message to {event.chat.id}: {e}")


# --- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ "–ù–∞–∑–∞–¥" ---

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥", StateFilter(None))
async def back_to_main_menu_from_reply(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=message.from_user.id).first()
    kb = admin_kb if emp and emp.role == "Admin" else employee_main_kb
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb)


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥", StateFilter("*"))
async def cancel_state_and_return(msg: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    with get_session() as db:
        emp = db.query(Employee).filter_by(telegram_id=msg.from_user.id).first()
    kb = admin_kb if emp and emp.role == "Admin" else employee_main_kb
    await msg.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb)


async def main():
    os.makedirs(UPLOAD_FOLDER_ONBOARDING, exist_ok=True)
    await get_me_id()
    logger.info("DATABASE_URL=%s", DATABASE_URL)
    scheduler.start()
    allowed_updates = dp.resolve_used_update_types()
    logger.info("Bot starting polling... allowed_updates=%s", allowed_updates)
    await dp.start_polling(bot, allowed_updates=allowed_updates)


if __name__ == "__main__":
    asyncio.run(main())

